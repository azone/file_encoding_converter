#!/usr/bin/env python

import sys
import argparse
import codecs
import time

CLEAR_LINE = '\r\033[K'

def print_error(error_string):
    sys.stderr.write(error_string + '\n')
    sys.stderr.flush()

def clear_line():
    sys.stdout.write(CLEAR_LINE)

def print_without_line(message):
    sys.stdout.write(message)

def flush_message():
    sys.stdout.flush()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Convert a file\'s encoding to what you want.')
    parser.add_argument('input_file', metavar='input_file', help='Input file', nargs='+')
    parser.add_argument('-o', '--output_file', help='Output file(this will replace the input file if not specified)',
                        default=None)
    parser.add_argument('-d', '--input_encoding', help='Input encoding(default is GBK)', default='GBK')
    parser.add_argument('-e', '--output_encoding', help='Output encoding(default is UTF8)', default='UTF8')
    args = parser.parse_args()

    input_file_count = len(args.input_file)
    for input_file in args.input_file:
        try:
            print_without_line('Covert %s...' % (input_file, ))
            with codecs.open(input_file, 'rb', encoding=args.input_encoding) as fp:
                content = fp.read()
                encoded_content = codecs.encode(content, args.output_encoding)
                output_file = None if input_file_count > 1 else args.output_file
                if output_file is None:
                    output_file = input_file
                with open(output_file, 'wb') as new_fp:
                    new_fp.write(encoded_content)
            time.sleep(0.2)
            clear_line()
            print('\033[32mConvert %s... Done' % (input_file, ) + '\033[0m')
        except IOError as error:
            clear_line()
            print_error('\033[31m' + input_file + ': ' + error.strerror + '\033[0m')
            sys.exit(2)
        except ValueError as error:
            clear_line()
            print('\033[31m' + input_file + ': ' + str(error) + '\033[0m')
            sys.exit(2)
        else:
            pass
